package org.mnr.blocks_18;

import java.io.IOException;

public class Constructor {
	
	Constructor(){
		
//		super();//This call must be the first statement of a constructor whether default or parameterized constructor
		
		System.out.println("default constructor");
	}

	Constructor(int i){//it is a parameterized constructor
		this();//this invokes specific constructor of current class. In this case it invokes default constructor
		
		System.out.println("parameterized constructor| param="+i);
		/*
		 * In a constructor only either super() call or this() call is allowed
		 * Both in the same constructor is not allowed
		 * And both should be the first statement of the constructor
		 * both super() and this() are allowed only inside a constructor and nowhere else
		 * this and super keywords are allowed anywhere in any class
		 */
	}
	void Constructor(){
		System.out.println("");
		
		/*
		 * Though name is equal to class, its not a constructor
		 * As it is having a return type
		 * It won't cause any compiler error but
		 * treated as normal method
		 */
	}
	public static void main(String[] args) {
		concept();
//		defaultConstructor();
		

	}
	
	public static void concept()
	{
		/*
		 * constructor is used to initialization of object not for creating one
		 * constructor typically used for instanitiating the instance members of a class
		 * Constructor name and class name should be exactly same
		 * no return type is allowed for constructor not even void
		 * If any return type is provided , then that is treated as a normal method by compiler
		 * Modifiers allowed for constructor are public, private, protected and default
		 * Any other modifier is not allowed for constructor
		 * If programmer doesn't provide any constructor, then compiler will generate one with single statement
		 * i.e., super();. It calls the super class 
		 * Every class in java even abstract class can have a construtor but not an interface
		 * If programmer provides parameterized constructor, it is highly recommanded to provide
		 * default no-arg constructor also
		 */
		
//		Constructor con	=	new Constructor();
		Constructor con1	=	new Constructor(10);
	}
	
	public static void defaultConstructor(){
		
		/*
		 * Default constructor is generated by compiler only if programmer doesn't provide any constructor
		 * If programmer provides parameterized constructor then compiler won't generate any constructor
		 * Rules for default constructor:
		 * It's a no-arg constructor
		 * It's access modifier is same as it's class. This only applicable for public and default
		 * default constructor contains only one statemnt super() which calls the super class constructor
		 */
		Constructor con	=	new Constructor();
		
	}
	
	public static void constructorOverloading(){
		/*
		 * constructors can be overloaded
		 * Obviously name should be same for all constructors but with different type of parameters
		 * Only overloading is applicable for constructors but not overriding
		 */
	}
	
	public static void recursiveConstructorInvocation(){
		/*
		 * If consrtuctor is recursively invoked, then compiler throws Error
		 * But incase of recursive method calling, jvm throws Runtime exception StackOverFlowError
		 * Ex: Refer org.mnr.blocks_18.Constructor2 constructors and commented part
		 */
	}
	
	public static void exceptionHierarchyInConstructors(){
		/*
		 * If parent class constructor throws an exception and in child class constructor
		 * if parent class constructor is invoked, it should throw same exception or its parent class exception
		 * otherwise CE
		 * Ex: refer org.mnr.blocks_18.Child3 constructor with string as parameter 
		 */
		
		
	}
}

class Constructor2{
	
	public Constructor2() {
//		this();//CE:Recursive constructor invocation Constructor2()
		this(10);//this calls int parameterized constructor
	}
	
	public Constructor2(int i){
//		this();//CE:Recursive constructor invocation Constructor2()
	}
	
	public Constructor2(String name) throws IOException{
		System.out.println("Constructor2 string parameterized exception");
	}
}

class Child3 extends Constructor2{
	
	public Child3() throws Throwable {//if throws is not defined then CE:Unhandled exception type IOException
		super("Naveen");
	}
}